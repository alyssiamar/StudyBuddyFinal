{"ast":null,"code":"var _jsxFileName = \"/Users/alyssia/StudyBuddy/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Pomodoro Timer component with task interleaving\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PomodoroTimer() {\n  _s();\n  const [tasks, setTasks] = useState([]); // List of tasks (subjects)\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(0); // Track current task index\n  const [minutes, setMinutes] = useState(25); // Default Pomodoro time: 25 minutes\n  const [seconds, setSeconds] = useState(0); // Start with 0 seconds\n  const [isRunning, setIsRunning] = useState(false); // Timer state (running or paused)\n  const [isBreak, setIsBreak] = useState(false); // Whether the timer is for a break or Pomodoro session\n\n  // Add a new task to the task list\n  const addTask = taskName => {\n    setTasks(prevTasks => [...prevTasks, taskName]);\n  };\n\n  // Switch to the next task in the list\n  const switchTask = () => {\n    setCurrentTaskIndex(prevIndex => (prevIndex + 1) % tasks.length); // Loop through tasks\n  };\n\n  // Timer countdown effect\n  useEffect(() => {\n    let interval;\n\n    // Start the timer if it's running\n    if (isRunning) {\n      interval = setInterval(() => {\n        // Decrease time every second\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Timer ends, switch to break or next task\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? 25 : 5); // If it's a break, switch to 5 minutes; else, switch to 25 minutes\n            setSeconds(0);\n            if (isBreak && tasks.length > 0) {\n              // Switch to the next task when break is over\n              switchTask();\n            }\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000); // Decrease every second\n    } else {\n      // If timer is paused, clear the interval\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isRunning, minutes, seconds, isBreak, tasks]); // Re-run effect when timer state changes\n\n  // Get current task name or default message if no tasks\n  const currentTask = tasks[currentTaskIndex] || 'No task selected';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isBreak ? \"Break Time!\" : `Pomodoro Timer - Task: ${currentTask}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [String(minutes).padStart(2, '0'), \":\", String(seconds).padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRunning(!isRunning),\n      children: isRunning ? \"Pause\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsRunning(false);\n        setMinutes(25);\n        setSeconds(0);\n        setIsBreak(false); // Reset the timer\n      },\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskManager, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n// Component to manage adding tasks (subjects)\n_s(PomodoroTimer, \"bcAH9rS6/MyadjDelz6wk5lhjTo=\");\n_c = PomodoroTimer;\nfunction TaskManager({\n  addTask\n}) {\n  _s2();\n  const [taskName, setTaskName] = useState('');\n\n  // Handle adding a task\n  const handleAddTask = () => {\n    if (taskName.trim() === '') return; // Don't add empty tasks\n    addTask(taskName); // Add the task to the list\n    setTaskName(''); // Clear input after adding\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: taskName,\n      onChange: e => setTaskName(e.target.value),\n      placeholder: \"Enter task name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s2(TaskManager, \"+8PLwpsOfuqrybg/Jil3XqizyAQ=\");\n_c2 = TaskManager;\nexport default PomodoroTimer;\nvar _c, _c2;\n$RefreshReg$(_c, \"PomodoroTimer\");\n$RefreshReg$(_c2, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PomodoroTimer","_s","tasks","setTasks","currentTaskIndex","setCurrentTaskIndex","minutes","setMinutes","seconds","setSeconds","isRunning","setIsRunning","isBreak","setIsBreak","addTask","taskName","prevTasks","switchTask","prevIndex","length","interval","setInterval","clearInterval","currentTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","String","padStart","onClick","TaskManager","_c","_s2","setTaskName","handleAddTask","trim","type","value","onChange","e","target","placeholder","_c2","$RefreshReg$"],"sources":["/Users/alyssia/StudyBuddy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Pomodoro Timer component with task interleaving\nfunction PomodoroTimer() {\n  const [tasks, setTasks] = useState([]);                // List of tasks (subjects)\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(0); // Track current task index\n  const [minutes, setMinutes] = useState(25);             // Default Pomodoro time: 25 minutes\n  const [seconds, setSeconds] = useState(0);              // Start with 0 seconds\n  const [isRunning, setIsRunning] = useState(false);      // Timer state (running or paused)\n  const [isBreak, setIsBreak] = useState(false);          // Whether the timer is for a break or Pomodoro session\n\n  // Add a new task to the task list\n  const addTask = (taskName) => {\n    setTasks((prevTasks) => [...prevTasks, taskName]);\n  };\n\n  // Switch to the next task in the list\n  const switchTask = () => {\n    setCurrentTaskIndex((prevIndex) => (prevIndex + 1) % tasks.length); // Loop through tasks\n  };\n\n  // Timer countdown effect\n  useEffect(() => {\n    let interval;\n\n    // Start the timer if it's running\n    if (isRunning) {\n      interval = setInterval(() => {\n        // Decrease time every second\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Timer ends, switch to break or next task\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? 25 : 5);  // If it's a break, switch to 5 minutes; else, switch to 25 minutes\n            setSeconds(0);\n\n            if (isBreak && tasks.length > 0) {\n              // Switch to the next task when break is over\n              switchTask();\n            }\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000); // Decrease every second\n    } else {\n      // If timer is paused, clear the interval\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isRunning, minutes, seconds, isBreak, tasks]); // Re-run effect when timer state changes\n\n  // Get current task name or default message if no tasks\n  const currentTask = tasks[currentTaskIndex] || 'No task selected';\n\n  return (\n    <div className=\"timer\">\n      <h1>{isBreak ? \"Break Time!\" : `Pomodoro Timer - Task: ${currentTask}`}</h1>\n      <div className=\"time\">\n        {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}\n      </div>\n      <button onClick={() => setIsRunning(!isRunning)}>\n        {isRunning ? \"Pause\" : \"Start\"}\n      </button>\n      <button onClick={() => {\n        setIsRunning(false); \n        setMinutes(25); \n        setSeconds(0);\n        setIsBreak(false); // Reset the timer\n      }}>\n        Reset\n      </button>\n\n      {/* Task input form to add tasks */}\n      <TaskManager addTask={addTask} />\n    </div>\n  );\n}\n\n// Component to manage adding tasks (subjects)\nfunction TaskManager({ addTask }) {\n  const [taskName, setTaskName] = useState('');\n\n  // Handle adding a task\n  const handleAddTask = () => {\n    if (taskName.trim() === '') return;  // Don't add empty tasks\n    addTask(taskName);                   // Add the task to the list\n    setTaskName('');                     // Clear input after adding\n  };\n\n  return (\n    <div className=\"task-manager\">\n      <h3>Add a Task</h3>\n      <input \n        type=\"text\" \n        value={taskName} \n        onChange={(e) => setTaskName(e.target.value)} \n        placeholder=\"Enter task name\"\n      />\n      <button onClick={handleAddTask}>Add Task</button>\n    </div>\n  );\n}\n\nexport default PomodoroTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}