{"ast":null,"code":"var _jsxFileName = \"/Users/alyssia/StudyBuddyFinal-1/src/FlowtimeTimer.js\",\n  _s = $RefreshSig$();\n// src/FlowtimeTimer.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlowtimeTimer = () => {\n  _s();\n  // Timer state\n  const [minutes, setMinutes] = useState(0); // Start with 0 minutes\n  const [seconds, setSeconds] = useState(0); // Start with 0 seconds\n  const [isRunning, setIsRunning] = useState(false); // Timer state (running or paused)\n  const [workDuration, setWorkDuration] = useState(90); // Default work session is 90 minutes\n  const [breakDuration, setBreakDuration] = useState(15); // Default break duration is 15 minutes\n  const [isBreak, setIsBreak] = useState(false); // Whether the timer is in work or break mode\n\n  // Effect hook to handle the timer countdown\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Timer ends, switch to break mode\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? workDuration : breakDuration); // Switch between work and break durations\n            setSeconds(0);\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000); // Timer updates every second\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isRunning, minutes, seconds, isBreak, workDuration, breakDuration]); // Re-run when the timer state changes\n\n  // Start or pause the timer\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  // Reset the timer\n  const resetTimer = () => {\n    setIsRunning(false);\n    setMinutes(workDuration); // Reset to work duration\n    setSeconds(0);\n    setIsBreak(false); // Reset to work session\n  };\n\n  // Change work duration\n  const changeWorkDuration = e => {\n    const newDuration = parseInt(e.target.value, 10);\n    if (newDuration > 0) {\n      setWorkDuration(newDuration);\n      if (!isRunning) {\n        setMinutes(newDuration);\n      }\n    }\n  };\n\n  // Change break duration\n  const changeBreakDuration = e => {\n    const newDuration = parseInt(e.target.value, 10);\n    if (newDuration > 0) {\n      setBreakDuration(newDuration);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isBreak ? 'Take a Break!' : 'Work Time!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [String(minutes).padStart(2, '0'), \":\", String(seconds).padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTimer,\n        children: isRunning ? 'Pause' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Work Duration (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: workDuration,\n          onChange: changeWorkDuration,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Break Duration (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: breakDuration,\n          onChange: changeBreakDuration,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(FlowtimeTimer, \"3D0fdmwGlfvXAL5lrZgrhAzsbLQ=\");\n_c = FlowtimeTimer;\nexport default FlowtimeTimer;\nvar _c;\n$RefreshReg$(_c, \"FlowtimeTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FlowtimeTimer","_s","minutes","setMinutes","seconds","setSeconds","isRunning","setIsRunning","workDuration","setWorkDuration","breakDuration","setBreakDuration","isBreak","setIsBreak","interval","setInterval","clearInterval","toggleTimer","resetTimer","changeWorkDuration","e","newDuration","parseInt","target","value","changeBreakDuration","className","children","fileName","_jsxFileName","lineNumber","columnNumber","String","padStart","onClick","type","onChange","min","_c","$RefreshReg$"],"sources":["/Users/alyssia/StudyBuddyFinal-1/src/FlowtimeTimer.js"],"sourcesContent":["// src/FlowtimeTimer.js\n\nimport React, { useState, useEffect } from 'react';\n\nconst FlowtimeTimer = () => {\n  // Timer state\n  const [minutes, setMinutes] = useState(0);  // Start with 0 minutes\n  const [seconds, setSeconds] = useState(0);  // Start with 0 seconds\n  const [isRunning, setIsRunning] = useState(false); // Timer state (running or paused)\n  const [workDuration, setWorkDuration] = useState(90);  // Default work session is 90 minutes\n  const [breakDuration, setBreakDuration] = useState(15); // Default break duration is 15 minutes\n  const [isBreak, setIsBreak] = useState(false);  // Whether the timer is in work or break mode\n\n  // Effect hook to handle the timer countdown\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Timer ends, switch to break mode\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? workDuration : breakDuration);  // Switch between work and break durations\n            setSeconds(0);\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000);  // Timer updates every second\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isRunning, minutes, seconds, isBreak, workDuration, breakDuration]); // Re-run when the timer state changes\n\n  // Start or pause the timer\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  // Reset the timer\n  const resetTimer = () => {\n    setIsRunning(false);\n    setMinutes(workDuration); // Reset to work duration\n    setSeconds(0);\n    setIsBreak(false); // Reset to work session\n  };\n\n  // Change work duration\n  const changeWorkDuration = (e) => {\n    const newDuration = parseInt(e.target.value, 10);\n    if (newDuration > 0) {\n      setWorkDuration(newDuration);\n      if (!isRunning) {\n        setMinutes(newDuration);\n      }\n    }\n  };\n\n  // Change break duration\n  const changeBreakDuration = (e) => {\n    const newDuration = parseInt(e.target.value, 10);\n    if (newDuration > 0) {\n      setBreakDuration(newDuration);\n    }\n  };\n\n  return (\n    <div className=\"timer\">\n      <h1>{isBreak ? 'Take a Break!' : 'Work Time!'}</h1>\n      <div className=\"time\">\n        {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}\n      </div>\n      <div>\n        <button onClick={toggleTimer}>\n          {isRunning ? 'Pause' : 'Start'}\n        </button>\n        <button onClick={resetTimer}>Reset</button>\n      </div>\n\n      <div className=\"settings\">\n        <label>\n          Work Duration (minutes):\n          <input\n            type=\"number\"\n            value={workDuration}\n            onChange={changeWorkDuration}\n            min=\"1\"\n          />\n        </label>\n        <label>\n          Break Duration (minutes):\n          <input\n            type=\"number\"\n            value={breakDuration}\n            onChange={changeBreakDuration}\n            min=\"1\"\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default FlowtimeTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}