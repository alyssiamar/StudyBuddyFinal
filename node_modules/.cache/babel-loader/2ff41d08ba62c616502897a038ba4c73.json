{"ast":null,"code":"var _jsxFileName = \"/Users/alyssia/StudyBuddyFinal-1/src/UltradianTimer.js\";\nimport React, { useState, useEffect } from 'react';\nimport './UltradianTimer.css'; // Optional for styling\n\nfunction UltradianTimer() {\n  const [minutes, setMinutes] = useState(90); // Fixed work time: 90 minutes\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isBreak, setIsBreak] = useState(false);\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Switch between work and break periods\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? 90 : 20); // Switch between 90 min work and 20 min break\n            setSeconds(0);\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning, minutes, seconds, isBreak]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, isBreak ? \"Break Time!\" : \"Work Time!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, String(minutes).padStart(2, '0'), \":\", String(seconds).padStart(2, '0')), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsRunning(!isRunning),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, isRunning ? \"Pause\" : \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setIsRunning(false);\n      setMinutes(90); // Start with 90 minutes for work\n      setSeconds(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"The Ultradian Rhythm method is based on natural cycles of work and rest. Work for 90 minutes, then take a 20-minute break. This improves focus, mental performance, and overall productivity.\")));\n}\nexport default UltradianTimer;","map":{"version":3,"names":["React","useState","useEffect","UltradianTimer","minutes","setMinutes","seconds","setSeconds","isRunning","setIsRunning","isBreak","setIsBreak","interval","setInterval","clearInterval","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","String","padStart","onClick"],"sources":["/Users/alyssia/StudyBuddyFinal-1/src/UltradianTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './UltradianTimer.css';  // Optional for styling\n\nfunction UltradianTimer() {\n  const [minutes, setMinutes] = useState(90); // Fixed work time: 90 minutes\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isBreak, setIsBreak] = useState(false);\n\n  useEffect(() => {\n    let interval;\n\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (seconds === 0) {\n          if (minutes === 0) {\n            // Switch between work and break periods\n            setIsBreak(!isBreak);\n            setMinutes(isBreak ? 90 : 20);  // Switch between 90 min work and 20 min break\n            setSeconds(0);\n          } else {\n            setMinutes(minutes - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [isRunning, minutes, seconds, isBreak]);\n\n  return (\n    <div className=\"timer\">\n      <h2>{isBreak ? \"Break Time!\" : \"Work Time!\"}</h2>\n      <div className=\"time\">\n        {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}\n      </div>\n      <button onClick={() => setIsRunning(!isRunning)}>\n        {isRunning ? \"Pause\" : \"Start\"}\n      </button>\n      <button onClick={() => {\n        setIsRunning(false);\n        setMinutes(90); // Start with 90 minutes for work\n        setSeconds(0);\n      }}>\n        Reset\n      </button>\n\n      <div className=\"info\">\n        <p>\n          The Ultradian Rhythm method is based on natural cycles of work and rest.\n          Work for 90 minutes, then take a 20-minute break. This improves focus, mental performance, and overall productivity.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default UltradianTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}